service: todo-app-offline

frameworkVersion: '2'

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      sharedDb: true
      convertEmptyValues: true
      noStart: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-southeast-1
  profile: serverlessadmin
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: POST
          cors: true

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: GET
          cors: true

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: GET
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: PUT
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: DELETE
          cors: true

resources:
  Resources:
    TodosDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
